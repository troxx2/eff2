<div id="align">
	<nav id="nav">
		<a onclick="exit()">
			<i class="fa-solid fa-xmark"
				style="color: white; margin-right: auto; margin-left: 20px; font-size: 24px;"></i>
		</a>
		<span id="m" style="margin: auto;"></span>
		<a onclick="fullscreen()">
			<i class="fa-solid fa-expand"
				style="color: white; margin-left: auto; margin-right: 45px; font-size: 20px;"></i>
		</a>
	</nav>
	<iframe id="ifr"></iframe>
</div>

<div class="alignment-container-1" style="margin-top:15%;">
	<div class="header-container">
		<div class="logo-image">
			<img src="logo.png" alt="Shuttle Logo" width="100%">
		</div>
	</div>
	<div class="header-container" style="margin-bottom: 50px;">
	</div>
	<form id="form">
		<input autofocus autocomplete="off" class="search" id="search" placeholder="URL Or Search" required />
		<button type="submit" class="submit-button">
			<i class="fas fa-search searchicon"></i>
		</button>
	</form>
	<div id="suggestions"></div>
	<div style="margin-top: 50px; z-index: 1;">
		<%- include("ad"); %>
	</div>


	<footer>
		<a title="discord" href="https://discord.gg/xi">Discord</a>
		<a title="github" href="https://github.com/shuttlenetwork/shuttle">Github</a>
	</footer>
</div>
<script src="/assets/js/home.js"></script>
<script>
	const searchInput = document.getElementById("search");
	let debounceTimeout;
	let isRequestPending = false;

	async function fetchResults(searchText) {
		try {
			const response = await bare.fetch(`https://duckduckgo.com/ac/?q=${encodeURIComponent(searchText)}`);
			const data = await response.json();
			isRequestPending = false;
			if (!Array.isArray(data)) {
				console.log(`Error: Invalid response format. Expected Array (got ${typeof data})`);
				return;
			}
			const suggestions = document.getElementById("suggestions");
			suggestions.innerHTML = "";
			for(const result of (data.map(r => r.phrase))) {
				const suggestionItem = document.createElement("div");
				const suggestionLink = document.createElement("a");
				suggestionItem.classList = ["suggestions"];

				suggestionLink.textContent = result.length > 23 ? result.slice(0, 23) + "..." : result;

				suggestionLink.addEventListener("click", (event) => {
					event.preventDefault();
					searchurl(result);
				});
				suggestionItem.appendChild(suggestionLink);
				suggestions.appendChild(suggestionItem);
			}
		} catch (e) {
			isRequestPending = false;
			console.error(e);
		}
	}

	searchInput.addEventListener("input", (event) => {
		clearTimeout(debounceTimeout);
		const searchText = event.target.value;

		debounceTimeout = setTimeout(() => {
			if (searchText.length >= 1) {
				fetchResults(searchText)
			}
			if (searchText.length < 1) {

				document.getElementById("suggestions").style.display = "none";
			} else {
				document.getElementById("suggestions").style.display = "block";
			}
		}, 100);
	});

	const form = document.getElementById("form");

	searchInput.addEventListener("input", (event) => {
		const searchText = event.target.value;

		if (searchText.trim().length > 0) {
			form.focus();
		}
	});

	window.addEventListener("load", () => abc());
</script>
